Protocol Examples
-----------------

The first packet is sent from the client to the server:

	{
		"type": "login",
		"sequence": 1,
		"time": 0,
		"session_id": "d8e8fca2dc0f896fd7cb4cb0031ba249"
	}

My example client starts with 1 for the sequence, but could use any unique number generator.
The session_id was probably stored in a cookie, after the user logged in.
Login is external to the game protocol, so it can come from any 3rd party publisher.
The time is always zero, we will see how it's used in every packet later on.

In response to the login request, the server looks up this session, and replies:

	{
		"type": "login",
		"sequence": 1,
		"time": 1355468110,
		"status": "success",
		"account": {
			"username": "Gendou",
			"credits": 9001,
			"research": {
				"pool": 50,
				"population": 1,
				"finished": [1, 3, 5, 7, 11]
			}
		}
	}

Or, if there is a problem, you get an error message:

	{
		"type": "login",
		"sequence": 1,
		"status": "failure"
		"account": false,
	}

Notice that research thing?
It shows you how many research points are in the pool.
It also shows which research has been finished, in an array of IDs.

Next, the user will navigate away from the welcome page to load the galaxy:

	{
		"type": "loadGalaxy",
		"sequence": 2,
		"time": 0
	}

And be given the following packet in response:

	{
		"type": "updateGalaxy",
		"sequence": 2,
		"time": 1355468111,
		"galaxy": {
			"name": "Milky Way",
			"sectors_info": {
				"count": 1,
				"players": 1,
				"stars": 1,
				"guilds": 1,
			}
		}
	}

There might be multiple game servers, each with their own galaxy.
So, our galaxy is named, and some demographic information about its sectors.
In our example, there's only one of everything, because I don't want to type more.

Hopefully without delay, you'll also receive this packet:

	{
		"type": "updateSector",
		"sequence": 2,
		"time": 1355468111,
		"sector": {
			"id": 1,
			"location": { "top": 0, "left": 0 },
			"size": { "width": 100, "height": 100 },
			"stars_info": {
				"count": 1,
				"resources": 100,
				"area": 200
			},
			"player_info": {
				"systems": 2,
				"resources": { "owned": 115, "rate": 5, "remaining": 51436 },
				"area": {
					"used": { "ground": 145, "orbit": 22 },
					"unused": { "ground": 512, "orbit": 432 }
				},
				"military": { "attack": 23, "defense": 33 },
				"population": 1
			},
			"guild_info": {
				(same structure as player_info but different numbers)
			},
			"other_info": {
				(same structure as player_info but different numbers)
			}
		}
	}

The ID of the sector is for reference later on.
Sectors are rectangles, and their location and size are described in pixels.
Some demographic information about the stars, players, and guilds are provided.
If a player has one or more machines or ships in a system, it is considered occupied.
Technically, two or more players can occupy a single system.
But guild and other demographics count only unique systems.
It shows the value of resources owned, resource mining rate, resources remaining to be mined.
It shows the total area of colonized objects, cumulative area used by player's structures.
It shows calculated offensive power, calculated defensive power.
It shows points added to research pool per unit time by population for player in this sector.
The same stuff is shown for your own guild, as well as all other players combined.

The user may then click on this sector, to examine it.

	{
		"type": "loadSector",
		"sequence": 3,
		"time": 1355468111,
		"sector_id": 1,
	}

Notice that many of the fields are missing.
The only one that changed in the last second was the player_info.

And:

	{
		"type": "updateSystem",
		"sequence": 3,
		"time": 1355468112,
		"system": {
			"id": 1,
			"name": "Sol",
			"objects_info": {
				"count": 1,
				"resources": 300,
				"area": 100,
			},
			"player_info": {
				"objects": 4,
				"resources": { "owned": 115, "rate": 5, "remaining": 51436 },
				"area": {
					"used": { "ground": 145, "orbit": 22 },
					"unused": { "ground": 512, "orbit": 432 }
				},
				"military": { "attack": 23, "defense": 33 },
				"population": 1
			},
			"guild_info": {
				(same structure as player_info but different numbers)
			},
			"other_info": {
				(same structure as player_info but different numbers)
			}
		},
	}

The time property has become important.
The server keeps a list of which players are subscribed to which objects at which level of detail.
Then, it actively sends updates in real time, so the client is never out of date.
But, when the player selects a new view, we must give them a big fresh batch of data.
Since many entities have likely remained unchanged, we only send ones that have new changes.
Old changes are cached on the client.
This cache can be cleared, without problem, it will just mean a longer load time.

The player, guild, and other info should look familiar.

Next up is entering a star system:

	{
		"type": "loadSystem",
		"sequence": 4,
		"time": 1355468112,
		"system_id": 1
	}

Then:

	{
		"type": "updateObject",
		"sequence": 4,
		"time": 1355468113,
		"object": {
			"id": 1,
			"type": "star",
			"name": "Sol",
			"orbit": { "parent": 0, "distance": 0.0, "angle": 0 },
			"radius": 695500.0,
			"sprite": "star-type-g.jpg"
		}
	}

	{
		"type": "updateObject",
		"sequence": 4,
		"time": 1355468113,
		"object": {
			"id": 2,
			"type": "planet",
			"name": "Earth",
			"orbit": { "parent": 1, "distance": 149597871.0, "angle": 0 },
			"radius": 6378.1,
			"sprite": "planet-earth.jpg"
			"resources": false,
			"owner": false,
			"ships": false,
			"structures": false,
			"military": false,
			"population": false
		}
	}
	
	{
		"type": "updateObject",
		"sequence": 4,
		"time": 1355468113,
		"object": {
			"id": 3,
			"type": "star",
			"name": "Sol",
			"orbit": { "parent": 2, "distance": 384399.0, "angle": 0 },
			"size": 1737.4,
			"sprite": "star-type-g.jpg"
			"resources": false,
			"owner": false,
			"ships": false,
			"structures": false,
			"military": false,
			"population": false
		}
	}
	
You can calculate orbital area and land area from the radius and mass, respectively.

